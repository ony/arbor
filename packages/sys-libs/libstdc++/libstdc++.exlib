# Copyright 2015 Saleem Abdulrasool <compnerd@compnerd.org>
# Distributed under the terms of the GNU General Public License v2

require gnu [ suffix=bz2 subdir=gcc-${PV} pn=gcc ]
require alternatives toolchain-runtime-libraries

export_exlib_phases src_unpack src_install pkg_postinst

if [[ ${PV} == *_pre* ]] ; then
    DOWNLOADS="ftp://gcc.gnu.org/pub/gcc/snapshots/$(ever range 1-2)-${PV##*_pre}/gcc-$(ever range 1-2)-${PV##*_pre}.tar.bz2"
fi

SUMMARY="GNU C++ Runtime (libstdc++)"
LICENCES="GPL-2"
SLOT="$(ever range 1-2)"

MYOPTIONS="
    doc
    (
        linguas:
            be ca da de el eo es fi fr hr id ja nl ru sr sv tr uk vi zh_CN zh_TW
    )
"

DEPENDENCIES="
    build:
        sys-apps/texinfo[>4.4]
        sys-devel/gettext
        doc? (
            app-doc/doxygen[>=1.5.1]
            dev-libs/libxml2
            dev-util/xsltproc
            media-gfx/graphviz
        )
"

# fails though it gets ignored. should be fixed and then marked as expensive.
RESTRICT="test"

REMOTE_IDS="freecode:gcc"

UPSTREAM_RELEASE_NOTES="${HOMEPAGE}gcc-${SLOT}/"
UPSTREAM_CHANGELOG="${UPSTREAM_RELEASE_NOTES}changes.html"
UPSTREAM_DOCUMENTATION="${HOMEPAGE}onlinedocs/libstdc++/libstdc++-html-USERS-${SLOT}/ [[ description = [ API documentation ] ]]"

# TODO(compnerd) enable precompiled headers
# TODO(compnerd) make vtv an optional feature; it is not free and everything built against it will
# need to explicitly depend on the VTV option as it changes vtable information.
DEFAULT_SRC_CONFIGURE_PARAMS=( --enable-clocale=gnu --disable-libstdcxx-pch --disable-vtable-verify
                               --with-python-dir=../share/gdb/python )

ECONF_SOURCE="${WORKBASE}/gcc-${PV/_p?(re)/-}/libstdc++-v3"
WORK="${WORKBASE}/build/$(exhost --target)/libstdc++-v3"

DEFAULT_SRC_CONFIGURE_PARAMS=( --disable-multilib )

libstdc++_src_unpack() {
    default
    mkdir -p "${WORK}"

    # TODO(compnerd) find a more elegant solution to this (potentially addressing one of the
    # upstream FIXMEs in the process)
    edo sed -e "s,glibcxx_toolexecdir=no,glibcxx_toolexecdir='\${libdir}',"         \
            -e "s,glibcxx_toolexeclibdir=no,glibcxx_toolexeclibdir='\${libdir}',"   \
            -i "${ECONF_SOURCE}/configure"

    # NOTE(compnerd) make sure that we setup _GLIBCXX_HAS_GTHREADS properly
    edo ln -s gthr-$(${CXX} -v 2>&1 | sed -n 's/^Thread model: //p').h "${WORKBASE}/gcc-${PV/_p?(re)/-}/libgcc/gthr-default.h"
}

libstdc++_src_install() {
    local alternatives=() locale= name=

    default

    symlink_dynamic_libs ${PN}
    slot_dynamic_libs ${PN}
    slot_other_libs {${PN},libsupc++}.{a,la}

    edo pushd "${IMAGE}"

    # GDB extension
    # c.f. http://gcc.gnu.org/ml/gcc/2009-09/msg00085.html
    # NOTE(compnerd) these are formatters which are platform agnostic, so simply grab the version
    # from the primary ABI
    dodir /usr/share/gdb/python/auto-load
    name=$(basename usr/$(exhost --target)/lib/libstdc++.so.*-gdb.py -gdb.py)
    edo mv usr/$(exhost --target)/lib/libstdc++.so.*-gdb.py usr/share/gdb/python/auto-load/${name%-gdb.py}

    mo_provided=()
    for locale in usr/share/locale/*/*/*.mo; do
        [[ -e ${locale} ]] || continue
        name=${locale##*/}
        alternatives+=( /${locale} ${name%.mo}-${SLOT}.mo )
        mo_provided+=( /${locale} )
    done

    edo popd

    alternatives_for _${PN} ${SLOT} ${SLOT} "${alternatives[@]}"
}

libstdc++_pkg_postinst() {
    local mo
    for mo in "${mo_provided[@]}"; do
        if [[ -e ${ROOT}${mo} && ! -L ${ROOT}${mo} ]]; then
            nonfatal edo rm "${ROOT}${mo}" || ewarn "Failed to remove /${mo}"
        fi
    done

    alternatives_pkg_postinst
}

