# Copyright 2008-2009 Daniel Mierswa <impulze@impulze.org>
# Distributed under the terms of the GNU General Public License v2
# Based in part upon 'cups-1.3.8-r1.ebuild' from Gentoo, which is:
#     Copyright 1999-2008 Gentoo Foundation.

MY_PV=${MY_PV:-${PV/_beta/b}}
MY_PV=${MY_PV/_rc/rc}
MY_PNV=${PN}-${MY_PV}

require autotools [ supported_autoconf=[ 2.5 ] supported_automake=[ 1.15 ] ]
require pam systemd-service freedesktop-desktop gtk-icon-cache

export_exlib_phases src_prepare src_configure src_install src_test pkg_postinst pkg_postrm

SUMMARY="Common UNIX Printing System"
DESCRIPTION="A portable printing layer for UNIXÂ®-based operating systems."
HOMEPAGE="http://${PN}.org"
DOWNLOADS="${HOMEPAGE}/software/${MY_PV}/${MY_PNV}-source.tar.bz2"

REMOTE_IDS="freecode:${PN}"

UPSTREAM_DOCUMENTATION="${HOMEPAGE}/documentation.php"
UPSTREAM_RELEASE_NOTES="${UPSTREAM_DOCUMENTATION}/whatsnew.html"

LICENCES="GPL-2"
SLOT="0"
LANGS="ca cs es fr it ja ru"
MYOPTIONS="
    baselayout
    dbus
    debug
    kerberos
    pam
    perl
    python
    xinetd
    acl [[ description = [ Support POSIX ACL when authenticating with the CUPS daemon ] ]]
    avahi [[ description = [ Enable DNS Service Discovery (DNS_SD) support (printer sharing using Avahi) ] ]]
    tcpd [[ description = [ Use TCP Wrappers to restrict access to cupsd ] ]]
    linguas: ( ${LANGS} )
"

# testsuite has lots of FAILs for now, will check into those next version
RESTRICT="test"

DEPENDENCIES="
    build:
        virtual/pkg-config
    build+run:
        group/lpadmin
        dev-libs/gnutls
        dev-libs/libgcrypt
        dev-libs/libpaper
        sys-libs/zlib
        virtual/usb:1
        acl? ( sys-apps/acl )
        avahi? ( net-dns/avahi[dns_sd] )
        dbus? ( sys-apps/dbus )
        kerberos? ( app-crypt/heimdal )
        pam? ( sys-libs/pam )
        perl? ( dev-lang/perl:= )
        python? ( dev-lang/python:* )
        systemd? ( sys-apps/systemd )
        tcpd? ( sys-apps/tcp-wrappers )
    run:
        xinetd? ( sys-apps/xinetd )
    post:
        net-print/cups-filters [[ description = [ Common filters required by most printer drivers on Linux ] ]]
    suggestion:
        sys-apps/colord [[ description = [ ICC profiles referenced by PPD files are registered utilizing colord ] ]]
"

AT_M4DIR=( config-scripts )

cups_src_prepare() {
    # do not strip by default
    edo sed -e 's:INSTALL_STRIP="-s":INSTALL_STRIP="":' \
            -i config-scripts/cups-compiler.m4

    # do not overwrite libdir if lib64 is found on the system and
    # don't use the library dir as server directory, since that'll
    # break multilib
    edo sed -e 's#libdir=".*"#:#' \
            -e '/CUPS_SERVERBIN="/s:lib/cups:libexec/cups:' \
            -i config-scripts/cups-directories.m4

    # do not gzip manpages by default
    edo sed -i -e '/MAN[0-9]EXT=/s:\.gz::g' config-scripts/cups-manpages.m4

    # Disable silent rules
    edo sed -i '/^\.SILENT:$/d' Makedefs.in

    autotools_src_prepare
}

cups_src_configure() {
    local myconf=()

    for lang in ${LANGS}; do
        option "linguas:${lang}" && CUPSLANGS="${lang} ${CUPSLANGS}"
    done

    [[ -z "${CUPSLANGS}" ]] && CUPSLANGS=none

    myconf+=(
        --localstatedir=/var
        --enable-gnutls
        --enable-libpaper
        --enable-libusb
        --enable-raw-printing
        --enable-threads
        --disable-cdsassl
        --disable-dnssd
        --with-cups-{group,user}=lp
        --with-docdir="/usr/share/doc/${PNVR}/handbook"
        --with-languages="${CUPSLANGS}"
        --with-rundir=/run/cups
        --with-system-groups=lpadmin
        --with-optim=""
        --without-java
        --without-rcdir
        --without-php
        $(option_enable acl)
        $(option_enable avahi)
        $(option_enable dbus)
        $(option_enable debug debug)
        $(option_enable debug debug-guards)
        $(option_enable debug debug-printfs)
        $(option_enable kerberos gssapi)
        $(option_enable pam)
        $(option_enable systemd)
        $(option_enable tcpd tcp-wrappers)
        $(option_with perl)
        $(option_with python)
        $(option_with systemd systemd ${SYSTEMDSYSTEMUNITDIR})
        $(option_with xinetd xinetd /etc/xinetd.d)
        ac_cv_path_AR="${AR}"
        DSOFLAGS="${CFLAGS}" LDFLAGS="${CFLAGS} ${LDFLAGS}"
    )

    econf "${myconf[@]}"
}

cups_src_install() {
    emake BUILDROOT="${IMAGE}" install
    emagicdocs

    keepdir /usr/$(exhost --target)/libexec/cups/driver /usr/share/cups/{model,profiles} \
            /var/cache/cups/rss /var/log/cups /var/spool/cups/tmp

    keepdir /etc/cups/{interfaces,ppd,ssl}

    # provide our own pam script
    if option pam ; then
        edo rm -f "${IMAGE}/etc/pam.d/cups"
        pamd_mimic_system cups auth auth account
    fi

    if option baselayout ; then
        # add init.d dependencies to the cups init script
        local neededservices=
        option dbus && neededservices+=" dbus"

        [[ -n "${neededservices}" ]] && neededservices="need${neededservices}"

        newinitd "${FILES}"/cupsd.initd cupsd
        edo sed "s:\$neededservices:$neededservices:" -i "${IMAGE}"/etc/init.d/cupsd
    fi

    echo "ServerName /run/cups/cups.sock" >> "${IMAGE}"/etc/cups/client.conf

    # cups-filters now provides these
    edo rm "${IMAGE}"/usr/share/cups/banners/{classified,confidential,secret,standard,topsecret,unclassified}
    edo rm "${IMAGE}"/usr/share/cups/data/testprint
    edo rmdir "${IMAGE}"/usr/share/cups/{banners,data}

    # directories are created automatically on startup
    edo rm -r "${IMAGE}"/run
}

cups_pkg_postinst() {
    freedesktop-desktop_pkg_postinst
    gtk-icon-cache_pkg_postinst
}

cups_pkg_postrm() {
    freedesktop-desktop_pkg_postrm
    gtk-icon-cache_pkg_postrm
}

cups_src_test() {
    # 1 = medium testsuite
    emake test
    edo cd test
    USER=paludisbuild edo ./run-stp-tests.sh 1 2 n
}

#cups_src_test_expensive() {
#    if option multibuild_c:"${MULTIBUILD_C_DEFAULT_TARGET}" ; then
#        edo cd "${WORKBASE}/C/${MULTIBUILD_C_DEFAULT_TARGET}/${PNV}"
#        # 4 = comprehensive testsuite
#        emake test
#        edo cd test
#        USER=paludisbuild edo ./run-stp-tests.sh 4 2 n
#    fi
#}

