# Copyright 2004 Gentoo Foundation
# Distributed under the terms of the GNU General Public License, v2 or later
# Author Diego Petten√≤ <flameeyes@gentoo.org>
# $Header: /var/cvsroot/gentoo-x86/eclass/pam.eclass,v 1.11 2007/04/07 08:52:46 vapier Exp $
#
# This eclass contains functions to install pamd configuration files and
# pam modules.

# dopamd <file> [more files]
#
# Install pam auth config file in /etc/pam.d
dopamd() {
    illegal_in_global_scope

    [[ -z $1 ]] && die "dopamd requires at least one argument"

    ( # dont want to pollute calling env
        insinto /etc/pam.d
        insopts -m 0644
        doins "$@"
    )
    cleanpamd "${@##*/}"
}

# newpamd <old name> <new name>
#
# Install pam file <old name> as <new name> in /etc/pam.d
newpamd() {
    illegal_in_global_scope

    [[ $# -ne 2 ]] && die "newpamd requires two arguments"

    ( # dont want to pollute calling env
        insinto /etc/pam.d
        insopts -m 0644
        newins "$1" "$2"
    )
    cleanpamd $2
}

# dopamsecurity <section> <file> [more files]
#
# Installs the config files in /etc/security/<section>/
dopamsecurity() {
    illegal_in_global_scope

    [[ $# -lt 2 ]] && die "dopamsecurity requires at least two arguments"

    ( # dont want to pollute calling env
        insinto /etc/security/$1
        insopts -m 0644
        doins "${@:2}"
    )
}

# newpamsecurity <section> <old name> <new name>
#
# Installs the config file <old name> as <new name> in /etc/security/<section>/
newpamsecurity() {
    illegal_in_global_scope

    [[ $# -ne 3 ]] && die "newpamsecurity requires three arguments"

    ( # dont want to pollute calling env
        insinto /etc/security/$1
        insopts -m 0644
        newins "$2" "$3"
    )
}

# getpam_mod_dir
#
# Returns the pam modules' directory for current implementation
getpam_mod_dir() {
    echo /usr/$(exhost --target)/lib/security
}

# dopammod <file> [more files]
#
# Install pam module file in the pam modules' dir for current implementation
dopammod() {
    illegal_in_global_scope

    [[ -z $1 ]] && die "dopammod requires at least one argument"

    exeinto $(getpam_mod_dir)
    doexe "$@"
}

# newpammod <old name> <new name>
#
# Install pam module file <old name> as <new name> in the pam
# modules' dir for current implementation
newpammod() {
    [[ $# -ne 2 ]] && die "newpammod requires two arguements"

    exeinto $(getpam_mod_dir)
    newexe "$1" "$2"
}

# pamd_mimic_system <pamd file> <pamd base service> [auth levels]
#
# This function creates a pamd file which mimics system-auth file
# for the given levels in the /etc/pam.d directory.
#
# <pamd base service> can be either local-login, remote-login or auth.
# local-login or remote-login should be used when the application in
# question is usually used to start an interactive shell and is what
# pam_loginuid(8) refers to as "entry point application" which means it
# isn't normally started manually by the user in an already opened
# session. auth should be used for all other cases.
pamd_mimic_system() {
    illegal_in_global_scope

    [[ $# -lt 3 ]] && die "pamd_mimic_system requires at least three argments"

    dodir /etc/pam.d
    pamdfile=${IMAGE}/etc/pam.d/${1}
    edo echo -e "# File autogenerated by pamd_mimic_system in pam eclass\n\n" >> "${pamdfile}"

    authlevels="auth account password session"

    hasq "${2}" "auth local-login remote-login" || die "unknown base service"

    if has_version --root 'sys-libs/pam[<0.78]'; then
        mimic="\trequired\t\tpam_stack.so service=system-${2}"
    else
        mimic="\tinclude\t\tsystem-${2}"
    fi

    shift
    shift

    while [[ -n $1 ]]; do
        hasq $1 ${authlevels} || die "unknown level type"

        echo -e "$1${mimic}" >> "${pamdfile}"

        shift
    done
}

# cleanpamd <pamd file>
#
# Cleans a pam.d file from modules that might not be present on the system
# where it's going to be installed
cleanpamd() {
    illegal_in_global_scope

    while [[ -n $1 ]]; do
        if ! has_version --root sys-libs/pam; then
            edo sed -e '/pam_shells\|pam_console/s:^:#:' \
                    -i "${IMAGE}"/etc/pam.d/${1}
        fi

        shift
    done
}

